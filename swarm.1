.\" ============================================================================
.TH swarm 1 "December 3, 2014" "version 2.0.0" "USER COMMANDS"
.\" ============================================================================
.SH NAME
swarm \(em find clusters of nearly-identical nucleotide amplicons
.\" ============================================================================
.SH SYNOPSIS
.B swarm
[
.I options
] [
.I filename
]
.\" ============================================================================
.SH DESCRIPTION
Environmental or clinical molecular studies generate large volumes of
amplicons (e.g. SSU-rRNA sequences) that need to be clustered into
molecular operational taxonomic units. Traditional clustering methods
are based on greedy, input-order dependent algorithms, with arbitrary
selection of global cluster size and cluster centroids. To address
that problem, we developed \fBswarm\fR, a fast and robust method that
recursively groups amplicons with \fId\fR or less
differences. \fBswarm\fR produces stable clusters (or "swarms"), free
from centroid selection induced input-order dependency.
.PP
Exact clustering is impractical on large data sets when using a naïve
all-vs-all approach (more precisely a 2-combination without
repetitions), as it implies unrealistic numbers of pairwise
comparisons. \fBswarm\fR is based on a maximum number of differences
\fId\fR, and focuses only on very close relationships. An efficient
\fIk\fR-mer-based filtering and an astute use of comparisons results
obtained during the process allows to avoid most of the amplicon
comparisons needed in a naïve approach. To speed up the remaining
amplicon comparisons, \fBswarm\fR implements an extremely fast
Needleman-Wunsch algorithm making use of the Streaming SIMD Extensions
(SSE2) of modern x86-64 CPUs. If SSE2 instructions are not available,
\fBswarm\fR exits with an error message.
.PP
By default, \fBswarm\fR will work at its finest possible resolution
(\fId\fR = 1). It will then use a specifically crafted "stepping
stone" algorithm that provides indentical results, but at a much
greater speed. The speed difference is due to a change in
computational complexity (quadratic vs. linear), and will increase
favorably for \fBswarm\fR as datasets will grow larger.
.PP
\fBswarm\fR reads the named input \fIfilename\fR, a fasta file of
nucleotide amplicons. The amplicon identifier is defined as the string
comprised between the ">" symbol and the first space or the end of the
line, whichever comes first. As \fBswarm\fR outputs lists of amplicon
identifiers, amplicon identifiers must be unique to avoid ambiguity;
swarm exits with an error message if identifiers are not unique. If
amplicon identifiers end with a "_" followed by a positive integer,
that value is used as the amplicon copy number in the statistics
output file (see the option \-z to change that behavior for
usearch/vsearch users). The amplicon sequence is defined as a string
of [acgt] or [acgu] symbols (case insensitive), starting after the end
of the identifier line and ending before the next identifier line or
the file end; \fBswarm\fR exits with an error message if any other
symbol is present. Default is to read from standard input if no file
is named, or if the file name is "\-".
.\" ----------------------------------------------------------------------------
.SS Options
\fBswarm\fR recognizes the following command-line options:
.RS
.TP 9
.BI \-b\fP,\fB\ \-\-boundary\~ "positive integer"
when using the option \-\-fastidious, define what is a small OTU. By
default, an OTU is small if it has a mass of 2 or less, meaning that
it is composed of either one amplicon of abundance 2, or two amplicons
of abundance 1. Any positive value greater than 2 can be used. Using
higher boundary values will speed up the second pass, but also reduce
the taxonomical resolution of swarm results.
.TP
.BI \-d\fP,\fB\ \-\-differences\~ "positive integer"
maximum number of differences allowed between two amplicons, meaning
that two amplicons will be grouped if they have \fIinteger\fR (or
less) differences. This is \fBswarm\fR's most important parameter. The
number of differences is calculated as the number of mismatches
(substitutions, insertions or deletions) between the two amplicons
once the optimal pairwise global alignment has been found (see
"advanced options" for parameters influencing the pairwise
alignment). Any \fIinteger\fR between 1 and 256 can be used, but
aligning correctly two very distant amplicons is difficult and results
should be considered with caution. Using high \fId\fR values will also
decrease the taxonomical resolution of swarm results. Default number
of differences is 1.
.TP
.BI \-f\fP,\fB\ \-\-fastidious \0filename
when working with \fId\fR = 1, perform a second pass to reduce the
number of small OTUs. During the stone stepping process at \fId\fR =
1, a step can be missing for purely stochastic reasons, interrupting
the agglomerative process. That option will create virtual steps to
graft small OTUs upon bigger ones. By default, an OTU is small if it
has a mass of 2 or less (see the \-\-boundary option to increase that
value). Output the refined OTUs to \fIfilename\fR. Warning, that
second pass can be many times slower than the first pass.
.TP
.B \-h\fP,\fB\ \-\-help
display this help and exit.
.TP
.BI \-i\fP,\fB\ \-\-internal\-structure \0filename
output all pairs of nearly-identical amplicons to \fIfilename\fR using
a five-columns tab-delimited format:
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
amplicon A label.
.IP \n+[step].
amplicon B label.
.IP \n+[step].
number of differences between amplicons A and B (\fIpositive
integer\fR).
.IP \n+[step].
OTU number (\fIpositive integer\fR). OTUs are numbered in their order
of delineation, starting from 1. All pairs of amplicons belonging to
the same OTU will receive the same number.
.IP \n+[step].
number of steps from the OTU seed to amplicon B (\fIpositive
integer\fR).
.RE
.RE
.TP
.BI \-l\fP,\fB\ \-\-log \0filename
output all messages to \fIfilename\fR instead of \fIstandard error\fR,
with the exception of error messages of course. That option is useful
in situations where writing to \fIstandard error\fR is problematic
(for example, with certain job schedulers).
.TP
.B \-n\fP,\fB\ \-\-no\-otu\-breaking
desactivate the built-in OTU refinement (not recommended). Amplicon
abundance values are used to identify transitions among in-contact
OTUs and to separate them, yielding higher-resolution clustering
results. That option prevents that, and in practice, allows the
creation of a link between amplicon A and B, even if the abundance of
B is higher than the abundance of A.
.TP
.BI \-o\fP,\fB\ \-\-output\-file \0filename
output result to \fIfilename\fR. Result is a list of swarms, one swarm
per line. A swarm is a list of amplicon identifiers separated by
spaces. Default is to write to standard output.
.TP
.B \-r\fP,\fB\ \-\-mothur
output results in a format compatible with Mothur. That option
modifies swarm's default output format.
.TP
.BI \-s\fP,\fB\ \-\-statistics\-file \0filename
output statistics to the specified file. Default is not to output
statistics.  The file is a tab-separated table with one swarm per row
and seven columns of information: number of unique amplicons in the
swarm, total copy number of amplicons in the swarm, identifier of the
initial seed, initial seed copy number (if applicable), number of
singletons (amplicons with a copy number of 1), maximum number of
generations (i.e. numbers of iterations before the swarm reached its
natural limits), and the maximum radius of the swarm (i.e. number of
differences between the seed and the furthermost amplicon in the
swarm).
.TP
.BI \-t\fP,\fB\ \-\-threads\~ "positive integer"
number of computation threads to use. The number of threads should be
lesser or equal to the number of available CPU cores. Default number
of threads is 1.
.TP
.BI \-u\fP,\fB\ \-\-uclust\-file \0filename
output results in uclust-like file format to the specified file. That
option does not modify swarm default output format.
.TP
.B \-v\fP,\fB\ \-\-version
output version information and exit.
.TP
.B \-z\fP,\fB\ \-\-usearch_abundance
accept amplicon abundances specified using the usearch/vsearch style
(">label;size=INT[;]").
.LP
.\" ----------------------------------------------------------------------------
.SS Advanced options
\fBswarm\fR recognizes advanced command-line options modifying the
pairwise global alignment scoring parameters:
.RS
.TP 9
.BI \-m\fP,\fB\ \-\-match\-reward\~ "positive integer"
reward for a nucleotide match. Default is 5.
.TP
.BI \-p\fP,\fB\ \-\-mismatch\-penalty\~ "positive integer"
penalty for a nucleotide mismatch. Default is 4.
.TP
.BI \-g\fP,\fB\ \-\-gap\-opening\-penalty\~ "positive integer"
gap open penalty. Default is 12.
.TP
.BI \-e\fP,\fB\ \-\-gap\-extension\-penalty\~ "positive integer"
gap extension penalty. Default is 4.
.LP
As \fBswarm\fR focuses on close relationships, final results are
resilient to model parameters modifications. Modifying model
parameters only impacts analysis using a high number of differences.
.\" classic parameters are +5/-4/-12/-1
.\" ============================================================================
.SH EXAMPLES
.B swarm
-t 4 \-o
.I myfile.swarms myfile.fasta
.br
Divide the data set \fImyfile.fasta\fR into OTUs with the finest
resolution possible (1 difference, built-in breaking) using 4
computation threads and the fast algorithm. OTUs are written to the
file \fImyfile.swarms\fR.
.PP
zcat file.fas.gz | \fBswarm\fR | awk "{print NF}" | sort \-n | uniq
\-c
.br
Use swarm in a pipeline to read a compressed fasta file and to get its
swarm size profile (with default parameters).
.\" ============================================================================
.\" .SH LIMITATIONS
.\" List known limitations or bugs.
.\" ============================================================================
.SH AUTHORS
Concept by Frédéric Mahé, implementation by Torbjørn Rognes.
.\" ============================================================================
.SH CITATION
Mahé F, Rognes T, Quince C, de Vargas C, Dunthorn M. (2014) Swarm:
robust and fast clustering method for amplicon-based
studies. \fIPeerJ\fR 2:e593 <http://dx.doi.org/10.7717/peerj.593>
.\" ============================================================================
.SH REPORTING BUGS
Submit suggestions and bug-reports at
<https://github.com/torognes/swarm/issues>, send a pull request on
<https://github.com/torognes/swarm>, or compose a friendly or
curmudgeonly e-mail to Frédéric Mahé <mahe@rhrk.uni-kl.de> and
Torbjørn Rognes <torognes@ifi.uio.no>.
.\" ============================================================================
.SH AVAILABILITY
The software is available from <https://github.com/torognes/swarm>
.\" ============================================================================
.SH COPYRIGHT
Copyright (C) 2012, 2013, 2014 Frédéric Mahé & Torbjørn Rognes
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.
.PP
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Affero General Public License for more details.
.PP
You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see
<http://www.gnu.org/licenses/>.
.PP
.\" ============================================================================
.SH SEE ALSO
\fBswipe\fR, an extremely fast Smith-Waterman database search tool by
Torbjørn Rognes (available from <https://github.com/torognes/swipe>).
.PP
\fBvsearch\fR, an open-source re-implementation of the classic uclust
clustering method (by Robert C. Edgar), along with other amplicon
filtering and searching tools. \fBvsearch\fR is implemented by
Torbjørn Rognes and documented by Frédéric Mahé, and is available at
<https://github.com/torognes/vsearch>.
.PP
.\" ============================================================================
.SH VERSION HISTORY
New features and important modifications of \fBswarm\fR (short lived
or minor bug releases are not mentioned):
.RS
.TP
.BR v2.0.0\~ "released December 25, 2014"
Version 2.0.0 is faster and easier to use, providing new output
options (\-\-internal\-structure and \-\-log), new control options
(\-\-boundary, \-\-fastidious, \-\-no\-otu\-breaking), and built-in
OTU refinement. When using default parameters, a novel and
considerably faster algorithmic approach is used, guaranteeing swarm's
scalability.
.TP
.BR v1.2.20\~ "released November 6, 2014"
Version 1.2.20 presents a production-ready version of the alternative
algorithm (option \-a), with optional built-in OTU breaking (option
\-n). That alternative algorithmic approach (usable only with d = 1)
is considerably faster than currently used clustering algorithms, and
can deal with datasets of 100 million unique amplicons or more in a
few hours. Of course, results are rigourously identical to the results
previously produced with swarm. That release also introduces new
options to control swarm output (options \-i and \-l).
.TP
.BR v1.2.19\~ "released October 3, 2014"
Version 1.2.19 fixes a problem related to abundance information when
the sequence identifier includes multiple underscore characters.
.TP
.BR v1.2.18\~ "released September 29, 2014"
Version 1.2.18 reenables the possibility of reading sequences from
stdin if no file name is specified on the command line. It also fixes
a bug related to cpu features detection.
.TP
.BR v1.2.17\~ "released September 28, 2014"
Version 1.2.17 fixes a memory allocation bug introduced in version
1.2.15.
.TP
.BR v1.2.16\~ "released September 27, 2014"
Version 1.2.16 fixes a bug in the abundance sort introduced in version
1.2.15.
.TP
.BR v1.2.15\~ "released September 27, 2014"
Version 1.2.15 sorts the input sequences in order of decreasing
abundance unless they are detected to be sorted already. When using
the alternative algorithm for d = 1 it also sorts all subseeds in
order of decreasing abundance.
.TP
.BR v1.2.14\~ "released September 27, 2014"
Version 1.2.14 fixes a bug in the output with the swarm_breaker option
(\-b) when using the alternative algorithm (\-a).
.TP
.BR v1.2.12\~ "released August 18, 2014"
Version 1.2.12 introduces an option \-\-alternative\-algorithm to use
an extremely fast, experimental clustering algorithm for the special
case d = 1. Multithreading scalability of the default algorithm has
been noticeably improved.
.TP
.BR v1.2.10\~ "released August 8, 2014"
allows amplicon abundances to be specified using the usearch style in
the sequence header (e.g. ">id;size=1") when the \-z option is chosen.
.TP
.BR v1.2.8\~ "released August 5, 2014"
swarm 1.2.8 fixes an error with the gap extension penalty. Previous
versions used a gap penalty twice as large as intended. That bug
correction induces small changes in clustering results.
.TP
.BR v1.2.6\~ "released May 23, 2014"
Version 1.2.6 introduces an option \-\-mothur to output swarm results in
a format compatible with the microbial ecology community analysis
software suite Mothur.
.TP
.BR v1.2.5\~ "released April 11, 2014"
Version 1.2.5 removes the need for a POPCNT hardware instruction to be
present. Swarm now automatically checks whether POPCNT is available
and uses a slightly slower software implementation if not. Only basic
SSE2 instructions are now required to run swarm.
.TP
.BR v1.2.4\~ "released January 30, 2014"
Version 1.2.4 introduces an option \-\-break\-swarms to output all
pairs of amplicons with \fId\fR differences to standard error. That
option is used by the companion script `swarm_breaker.py` to refine
swarm results. The syntax of the inline assembly code is changed for
compatibility with more compilers.
.TP
.BR v1.2\~ "released May 16, 2013"
Version 1.2 greatly improves speed by using alignment-free comparisons
of amplicons based on \fIk\fR-mer word content. For each amplicon, the
presence-absence of all possible 5-mers is computed and recorded in a
1024-bits vector. Vector comparisons are extremely fast and
drastically reduce the number of costly pairwise alignments performed
by swarm. While remaining exact, swarm 1.2 can be more than 100-times
faster than swarm 1.1, when using a single thread with a large set of
sequences. The minor version 1.1.1, published just before, adds
compatibility with Apple computers, and corrects an issue in the
pairwise global alignment step that could lead to sub-optimal
alignments.
.TP
.BR v1.1\~ "released February 26, 2013"
Version 1.1 introduces two new important options: the possibility to
output swarming results using the uclust output format, and the
possibility to output detailed statistics on each swarms. Swarm 1.1 is
also faster: new filterings based on pairwise amplicon sequence
lengths and composition comparisons reduce the number of pairwise
alignments needed and speed up the swarming.
.TP
.BR v1.0\~ "released November 10, 2012"
First public release.
.LP
.\" ============================================================================
.\" NOTES
.\" visualize and output to pdf
.\" man -l swarm.1
.\" man -t ./swarm.1 | ps2pdf -sPAPERSIZE=a4 - > swarm_manual.pdf
.\"
.\" INSTALL (sysadmin)
.\" gzip -c swarm.1 > swarm.1.gz
.\" mv swarm.1.gz /usr/share/man/man1/
